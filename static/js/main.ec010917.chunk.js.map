{"version":3,"sources":["azure-storage-blob.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["containerName","sasToken","process","REACT_APP_STORAGESASTOKEN","storageAccountName","REACT_APP_STORAGERESOURCENAME","getBlobsInContainer","containerClient","a","returnedBlobUrls","listBlobsFlat","blob","push","name","createBlobInContainer","file","blobClient","getBlockBlobClient","options","blobHTTPHeaders","blobContentType","type","uploadData","uploadFileToBlob","blobService","BlobServiceClient","getContainerClient","createIfNotExists","access","storageConfigured","App","useState","blobList","setBlobList","fileSelected","setFileSelected","uploading","setUploading","Math","random","toString","inputKey","setInputKey","onFileChange","event","target","files","onFileUpload","blobsInContainer","onChange","onClick","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2NAMMA,EAAa,qBACbC,EAAWC,iJAAYC,0BACvBC,EAAqBF,iJAAYG,8BAYjCC,EAAmB,uCAAG,WAAOC,GAAP,2BAAAC,EAAA,sDACpBC,EAA6B,GADT,iCAKDF,EAAgBG,iBALf,iFAKTC,EALS,QAOxBF,EAAiBG,KAAjB,kBACaR,EADb,kCACyDJ,EADzD,YAC0EW,EAAKE,OARvD,2UAYnBJ,GAZmB,4EAAH,sDAiBnBK,EAAqB,uCAAG,WAAOP,EAAkCQ,GAAzC,iBAAAP,EAAA,6DAGtBQ,EAAaT,EAAgBU,mBAAmBF,EAAKF,MAGrDK,EAAU,CAAEC,gBAAiB,CAAEC,gBAAiBL,EAAKM,OAN/B,SAStBL,EAAWM,WAAWP,EAAMG,GATN,2CAAH,wDAcrBK,EAAgB,uCAAG,WAAOR,GAAP,iBAAAP,EAAA,yDAClBO,EADkB,yCACL,IADK,cAIjBS,EAAc,IAAIC,IAAJ,kBACPrB,EADO,mCACsCH,IAIpDM,EAAmCiB,EAAYE,mBAAmB1B,GATjD,SAUjBO,EAAgBoB,kBAAkB,CACtCC,OAAQ,cAXa,uBAejBd,EAAsBP,EAAiBQ,GAftB,gCAkBhBT,EAAoBC,IAlBJ,2CAAH,sDAsBPgB,I,QCnETM,KDQKzB,IAAuBH,GC4EnB6B,EAlFH,WAEV,MAAgCC,mBAAmB,IAAnD,mBAAOC,EAAP,KAAiBC,EAAjB,KAGA,EAAwCF,mBAAS,MAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KAGA,EAAkCJ,oBAAS,GAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAAgCN,mBAASO,KAAKC,SAASC,SAAS,KAAhE,mBAAOC,EAAP,KAAiBC,EAAjB,KAEMC,EAAe,SAACC,GAEpBT,EAAgBS,EAAMC,OAAOC,MAAM,KAG/BC,EAAY,uCAAG,4BAAAvC,EAAA,6DAEnB6B,GAAa,GAFM,SAKsBd,EAAiBW,GALvC,OAKbc,EALa,OAQnBf,EAAYe,GAGZb,EAAgB,MAChBE,GAAa,GACbK,EAAYJ,KAAKC,SAASC,SAAS,KAbhB,2CAAH,qDAsDlB,OACE,gCACE,mEACCX,IAAsBO,GAvCzB,gCACE,uBAAOf,KAAK,OAAO4B,SAAUN,GAAmBF,GAAY,IAC5D,sBACA,wBAAQpB,KAAK,SAAS6B,QAASH,EAA/B,wBAqCClB,GAAqBO,GAAa,4CACnC,uBACCP,GAAqBG,EAASmB,OAAS,GAX1C,8BACE,yDAWEtB,GAAqB,iECzETuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ec010917.chunk.js","sourcesContent":["// ./src/azure-storage-blob.ts\n\n// <snippet_package>\n// THIS IS SAMPLE CODE ONLY - NOT MEANT FOR PRODUCTION USE\nimport { BlobServiceClient, ContainerClient} from '@azure/storage-blob';\n\nconst containerName = `tutorial-container`;\nconst sasToken = process.env.REACT_APP_STORAGESASTOKEN;\nconst storageAccountName = process.env.REACT_APP_STORAGERESOURCENAME; \n// </snippet_package>\n\n// <snippet_isStorageConfigured>\n// Feature flag - disable storage feature to app if not configured\nexport const isStorageConfigured = () => {\n  return (!storageAccountName || !sasToken) ? false : true;\n}\n// </snippet_isStorageConfigured>\n\n// <snippet_getBlobsInContainer>\n// return list of blobs in container to display\nconst getBlobsInContainer = async (containerClient: ContainerClient) => {\n  const returnedBlobUrls: string[] = [];\n\n  // get list of blobs in container\n  // eslint-disable-next-line\n  for await (const blob of containerClient.listBlobsFlat()) {\n    // if image is public, just construct URL\n    returnedBlobUrls.push(\n      `https://${storageAccountName}.blob.core.windows.net/${containerName}/${blob.name}`\n    );\n  }\n\n  return returnedBlobUrls;\n}\n// </snippet_getBlobsInContainer>\n\n// <snippet_createBlobInContainer>\nconst createBlobInContainer = async (containerClient: ContainerClient, file: File) => {\n  \n  // create blobClient for container\n  const blobClient = containerClient.getBlockBlobClient(file.name);\n\n  // set mimetype as determined from browser with file upload control\n  const options = { blobHTTPHeaders: { blobContentType: file.type } };\n\n  // upload file\n  await blobClient.uploadData(file, options);\n}\n// </snippet_createBlobInContainer>\n\n// <snippet_uploadFileToBlob>\nconst uploadFileToBlob = async (file: File | null): Promise<string[]> => {\n  if (!file) return [];\n\n  // get BlobService = notice `?` is pulled out of sasToken - if created in Azure portal\n  const blobService = new BlobServiceClient(\n    `https://${storageAccountName}.blob.core.windows.net/?${sasToken}`\n  );\n\n  // get Container - full public read access\n  const containerClient: ContainerClient = blobService.getContainerClient(containerName);\n  await containerClient.createIfNotExists({\n    access: 'container',\n  });\n\n  // upload file\n  await createBlobInContainer(containerClient, file);\n\n  // get list of blobs in container\n  return getBlobsInContainer(containerClient);\n};\n// </snippet_uploadFileToBlob>\n\nexport default uploadFileToBlob;\n\n","// ./src/App.tsx\n\nimport React, { useState } from 'react';\n//import Path from 'path';\nimport uploadFileToBlob, { isStorageConfigured } from './azure-storage-blob';\n\nconst storageConfigured = isStorageConfigured();\n\nconst App = (): JSX.Element => {\n  // all blobs in container\n  const [blobList, setBlobList] = useState<string[]>([]);\n\n  // current file to upload into container\n  const [fileSelected, setFileSelected] = useState(null);\n\n  // UI/form management\n  const [uploading, setUploading] = useState(false);\n  const [inputKey, setInputKey] = useState(Math.random().toString(36));\n\n  const onFileChange = (event: any) => {\n    // capture file into state\n    setFileSelected(event.target.files[0]);\n  };\n\n  const onFileUpload = async () => {\n    // prepare UI\n    setUploading(true);\n\n    // *** UPLOAD TO AZURE STORAGE ***\n    const blobsInContainer: string[] = await uploadFileToBlob(fileSelected);\n\n    // prepare UI for results\n    setBlobList(blobsInContainer);\n\n    // reset state/form\n    setFileSelected(null);\n    setUploading(false);\n    setInputKey(Math.random().toString(36));\n  };\n\n  // display form\n  const DisplayForm = () => (\n    <div>\n      <input type=\"file\" onChange={onFileChange} key={inputKey || ''} />\n      <p />\n      <button type=\"submit\" onClick={onFileUpload}>\n        Upload!\n          </button>\n    </div>\n  )\n\n  /*\n  // display file name and image\n  const DisplayImagesFromContainer = () => (\n    <div>\n      <h2>Container items</h2>\n      <ul>\n        {blobList.map((item) => {\n          return (\n            <li key={item}>\n              <div>\n                {Path.basename(item)}\n                <br />\n                <img src={item} alt={item} height=\"200\" />\n              </div>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n  */\n  const DisplaySuccessMessage = () => (\n    <div>\n      <h2>Upload Successfull!!</h2>\n    </div>\n  );\n\n  return (\n    <div>\n      <h1>Upload file to Azure Blob Storage</h1>\n      {storageConfigured && !uploading && DisplayForm()}\n      {storageConfigured && uploading && <div>Uploading</div>}\n      <hr />\n      {storageConfigured && blobList.length > 0 && DisplaySuccessMessage()}\n      {!storageConfigured && <div>Storage is not configured.</div>}\n    </div>\n  );\n};\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n/* eslint-disable */\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}